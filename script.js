// game.js
const CONFIG = {
    techTree: {
        'agriculture': { 
            name: '–ó–µ–º–ª–µ–¥–µ–ª–∏–µ', 
            cost: { gold: 100, food: 50 }, 
            required: [], 
            unlocks: ['farm'],
            description: '–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å —Ñ–µ—Ä–º—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–∏—â–∏'
        },
        'masonry': { 
            name: '–ö–∞–º–µ–Ω–Ω–∞—è –∫–ª–∞–¥–∫–∞', 
            cost: { gold: 150, stone: 80 }, 
            required: [], 
            unlocks: ['quarry', 'stone_house', 'mine'],
            description: '–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–º–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è'
        },
        'wheel': { 
            name: '–ö–æ–ª–µ—Å–æ', 
            cost: { gold: 200, wood: 100 }, 
            required: [], 
            unlocks: ['trade'],
            description: '–£–ª—É—á—à–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏'
        }
    },
    buildings: {
        'hut': { 
            name: '–•–∏–∂–∏–Ω–∞', 
            baseCost: { wood: 30 }, 
            effect: { population: 5 },
            upgradedEffect: { population: 8 },
            description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –Ω–∞ 5 (8 –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è)',
            availableFromStart: true,
            upgradable: true,
            upgradeCost: { stone: 50, wood: 20 }
        },
        'wood_camp': { 
            name: '–õ–µ—Å–æ–ø–∏–ª–∫–∞', 
            baseCost: { wood: 20 }, 
            production: { wood: 15 },
            upgradedProduction: { wood: 25 },
            description: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç 15 –¥—Ä–µ–≤–µ—Å–∏–Ω—ã –≤ –≥–æ–¥ (25 –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è)',
            availableFromStart: true,
            upgradable: true,
            upgradeCost: { stone: 40, wood: 15 }
        },
        'hunting_camp': { 
            name: '–û—Ö–æ—Ç–Ω–∏—á–∏–π –ª–∞–≥–µ—Ä—å', 
            baseCost: { wood: 25 }, 
            production: { food: 20 },
            upgradedProduction: { food: 35 },
            description: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç 20 –µ–¥—ã –≤ –≥–æ–¥ (35 –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è)',
            availableFromStart: true,
            upgradable: true,
            upgradeCost: { stone: 30, wood: 15 }
        },
        'mine': {
            name: '–®–∞—Ö—Ç–∞',
            baseCost: { wood: 100, stone: 50 },
            production: { 
                gold: { chance: 0.05, amount: 10 },
                stone: { chance: 0.15, amount: 20 }
            },
            description: '5% —à–∞–Ω—Å –¥–æ–±—ã—á–∏ 10 –∑–æ–ª–æ—Ç–∞, 15% —à–∞–Ω—Å –¥–æ–±—ã—á–∏ 20 –∫–∞–º–Ω—è',
            availableFromStart: false,
            requiresTech: 'masonry',  // –¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è "–ö–∞–º–µ–Ω–Ω–∞—è –∫–ª–∞–¥–∫–∞"
            upgradable: true,
            upgradeCost: { stone: 80, gold: 50 }
        },
        'stone_house': { 
            name: '–ö–∞–º–µ–Ω–Ω—ã–π –¥–æ–º', 
            baseCost: { stone: 50, wood: 20 }, 
            effect: { population: 10 },
            description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –Ω–∞ 10',
            availableFromStart: false
        },
        'farm': { 
            name: '–§–µ—Ä–º–∞', 
            baseCost: { wood: 40, stone: 20 }, 
            production: { food: 50 },
            upgradedProduction: { food: 75 },
            description: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç 50 –µ–¥—ã –≤ –≥–æ–¥ (75 –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è)',
            availableFromStart: false,
            upgradable: true,
            upgradeCost: { stone: 60, wood: 30 }
        },
        'quarry': { 
            name: '–ö–∞–º–µ–Ω–æ–ª–æ–º–Ω—è', 
            baseCost: { wood: 60, stone: 30 }, 
            production: { stone: 30 },
            upgradedProduction: { stone: 45 },
            description: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç 30 –∫–∞–º–Ω—è –≤ –≥–æ–¥ (45 –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è)',
            availableFromStart: false,
            upgradable: true,
            upgradeCost: { stone: 70, gold: 40 }
        }
    },
    events: [
        { 
            name: '–ó–∞—Å—É—Ö–∞', 
            condition: (game) => Math.random() > 0.7 && Object.keys(game.buildings).some(b => b === 'farm'),
            effect: (game) => { 
                const penalty = 0.3 + Math.random() * 0.2;
                game.resources.food = Math.floor(game.resources.food * (1 - penalty)); 
                return `–£—Ä–æ–∂–∞–π —Å–Ω–∏–∂–µ–Ω –Ω–∞ ${Math.floor(penalty * 100)}%!`; 
            } 
        },
        { 
            name: '–ù–∞—Ö–æ–¥–∫–∞', 
            chance: 0.15,
            effect: (game) => { 
                const goldFound = 50 + Math.floor(Math.random() * 100);
                game.resources.gold += goldFound;
                return `–ù–∞–π–¥–µ–Ω–æ –∑–æ–ª–æ—Ç–æ (+${goldFound})!`; 
            } 
        },
        {
            name: '–≠–ø–∏–¥–µ–º–∏—è',
            condition: (game) => game.population > 80 && Math.random() > 0.8,
            effect: (game) => {
                const deaths = Math.floor(game.population * 0.1 + Math.random() * 0.1);
                game.population -= deaths;
                return `–≠–ø–∏–¥–µ–º–∏—è! –ü–æ–≥–∏–±–ª–æ ${deaths} –∂–∏—Ç–µ–ª–µ–π.`;
            }
        }
    ]
};

function initState() {
    return {
        cityName: '–ù–æ–≤—ã–π –ì–æ—Ä–æ–¥',
        year: 1,
        era: '–ö–∞–º–µ–Ω–Ω—ã–π –≤–µ–∫',
        population: 30,
        morale: 100,
        resources: { 
            wood: 80, 
            stone: 300, 
            food: 150, 
            gold: 30 
        },
        buildings: {},
        technologies: [],
        eventLog: [],
        lastEventYear: 0,
        foodProduction: 0,
        stoneProduction: 0,
        woodProduction: 0,
        upgradedBuildings: {}
    };
}

let gameState = initState();

const elements = {
    cityName: document.getElementById("city-name"),
    year: document.getElementById("year"),
    era: document.getElementById("era"),
    population: document.getElementById("population"),
    morale: document.getElementById("morale"),
    wood: document.getElementById("wood"),
    stone: document.getElementById("stone"),
    food: document.getElementById("food"),
    gold: document.getElementById("gold"),
    techList: document.getElementById("tech-list"),
    researchList: document.getElementById("research-list"),
    buildingsList: document.getElementById("buildings-list"),
    actionsList: document.getElementById("actions-list"),
    eventLog: document.getElementById("event-log")
};

function initGame() {
    const saved = localStorage.getItem('cityBuilderSave');
    if (saved) {
        if (confirm('–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É?')) {
            loadGame();
        } else {
            newGame();
        }
    } else {
        newGame();
    }
    updateUI();
}

function newGame() {
    if (gameState.year > 1 && !confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω!')) {
        return;
    }
    
    gameState = initState();
    gameState.cityName = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:", "–ù–æ–≤—ã–π –ì–æ—Ä–æ–¥") || "–ù–æ–≤—ã–π –ì–æ—Ä–æ–¥";
    localStorage.setItem('cityName', gameState.cityName);
    
    elements.eventLog.innerHTML = '<h3>–°–æ–±—ã—Ç–∏—è:</h3>';
    gameState.eventLog = [];
    
    logEvent(`–û—Å–Ω–æ–≤–∞–Ω –≥–æ—Ä–æ–¥ ${gameState.cityName}!`);
    updateUI();
}

function updateUI() {
    elements.cityName.textContent = gameState.cityName;
    elements.year.textContent = gameState.year;
    elements.era.textContent = gameState.era;
    elements.population.textContent = gameState.population;
    elements.morale.textContent = gameState.morale;
    
    elements.wood.textContent = gameState.resources.wood;
    elements.stone.textContent = gameState.resources.stone;
    elements.food.textContent = gameState.resources.food;
    elements.gold.textContent = gameState.resources.gold;
    
    renderTechList();
    renderResearchList();
    renderBuildings();
    renderActions();
}

function renderTechList() {
    elements.techList.innerHTML = gameState.technologies
        .map(techId => {
            const tech = CONFIG.techTree[techId];
            return `<div class="tech-item">
                <strong>${tech.name}</strong>: ${tech.description}
            </div>`;
        })
        .join('') || '<div>–ï—â–µ –Ω–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</div>';
}

function renderResearchList() {
    elements.researchList.innerHTML = getAvailableTechs()
        .map(tech => {
            const costStr = Object.entries(tech.cost)
                .map(([res, amount]) => `${res === 'gold' ? 'ü™ô' : res === 'food' ? 'üåæ' : res === 'wood' ? 'ü™µ' : 'ü™®'}${amount}`)
                .join(' ');
            
            return `<button onclick="researchTech('${tech.id}')">
                ${tech.name} (${costStr})<br>
                <small>${tech.description}</small>
            </button>`;
        })
        .join('') || '<div>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è</div>';
}

function renderBuildings() {
    elements.buildingsList.innerHTML = Object.entries(gameState.buildings)
        .map(([type, count]) => {
            const info = CONFIG.buildings[type];
            const isUpgraded = gameState.upgradedBuildings[type] || false;
            const canUpgrade = info.upgradable && 
                gameState.technologies.includes('masonry') && 
                !isUpgraded;
            
            return `<div class="building-item">
                <strong>${info.name}</strong> √ó ${count} ${isUpgraded ? '(–£–ª—É—á—à–µ–Ω–æ)' : ''}
                ${canUpgrade ? `<button class="upgrade-btn" onclick="upgradeBuilding('${type}')">–£–ª—É—á—à–∏—Ç—å</button>` : ''}
                <br><small>${info.description}</small>
            </div>`;
        })
        .join('') || '<div>–ù–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫</div>';
}

function renderActions() {
    elements.actionsList.innerHTML = getAvailableBuildings()
        .map(building => {
            const costStr = Object.entries(building.baseCost)
                .map(([res, amount]) => `${res === 'wood' ? 'ü™µ' : res === 'stone' ? 'ü™®' : res === 'food' ? 'üåæ' : 'ü™ô'}${amount}`)
                .join(' ');
            
            return `<button onclick="build('${building.id}')">
                üèóÔ∏è ${building.name} (${costStr})<br>
                <small>${building.description}</small>
            </button>`;
        })
        .join('') || '<div>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫</div>';
}

function getAvailableTechs() {
    return Object.entries(CONFIG.techTree)
        .filter(([id, tech]) => 
            !gameState.technologies.includes(id) && 
            tech.required.every(req => gameState.technologies.includes(req)))
        .map(([id, tech]) => ({ id, ...tech }));
}

function getAvailableBuildings() {
    return Object.entries(CONFIG.buildings)
        .filter(([id, building]) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
            if (building.availableFromStart) return true;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π
            const unlockedByTech = Object.entries(CONFIG.techTree)
                .some(([techId, tech]) => 
                    gameState.technologies.includes(techId) && 
                    tech.unlocks.includes(id));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            const meetsRequirements = !building.requiresTech || 
                gameState.technologies.includes(building.requiresTech);
            
            return unlockedByTech && meetsRequirements;
        })
        .map(([id, building]) => ({ id, ...building }));
}

function researchTech(techId) {
    const tech = CONFIG.techTree[techId];
    if (!tech) return;
    
    for (const [res, amount] of Object.entries(tech.cost)) {
        if (gameState.resources[res] < amount) {
            logEvent(`–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è ${tech.name}!`);
            return;
        }
    }
    
    for (const [res, amount] of Object.entries(tech.cost)) {
        gameState.resources[res] -= amount;
    }
    
    gameState.technologies.push(techId);
    logEvent(`–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è: ${tech.name}!`);
    
    updateUI();
}

function build(buildingId) {
    const building = CONFIG.buildings[buildingId];
    if (!building) return;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    if (building.requiresTech && !gameState.technologies.includes(building.requiresTech)) {
        logEvent(`–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è: ${CONFIG.techTree[building.requiresTech].name}!`);
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    for (const [res, amount] of Object.entries(building.baseCost)) {
        if (gameState.resources[res] < amount) {
            logEvent(`–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ ${building.name}!`);
            return;
        }
    }

    // –°–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    for (const [res, amount] of Object.entries(building.baseCost)) {
        gameState.resources[res] -= amount;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–¥–∞–Ω–∏—è
    if (!gameState.buildings[buildingId]) {
        gameState.buildings[buildingId] = 1;
    } else {
        gameState.buildings[buildingId]++;
    }

    // –î–ª—è —à–∞—Ö—Ç—ã –Ω–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è
    if (buildingId !== 'mine') {
        updateProduction(buildingId, gameState.upgradedBuildings[buildingId] || false);
    }

    logEvent(`–ü–æ—Å—Ç—Ä–æ–µ–Ω–æ: ${building.name}`);
    updateUI();
}

function upgradeBuilding(buildingId) {
    const building = CONFIG.buildings[buildingId];
    if (!building || !building.upgradable) return;
    
    if (gameState.upgradedBuildings[buildingId]) {
        logEvent(`${building.name} —É–∂–µ —É–ª—É—á—à–µ–Ω—ã!`);
        return;
    }
    
    for (const [res, amount] of Object.entries(building.upgradeCost)) {
        if (gameState.resources[res] < amount) {
            logEvent(`–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è ${building.name}!`);
            return;
        }
    }
    
    for (const [res, amount] of Object.entries(building.upgradeCost)) {
        gameState.resources[res] -= amount;
    }
    
    gameState.upgradedBuildings[buildingId] = true;
    updateProduction(buildingId, true);
    logEvent(`${building.name} —É–ª—É—á—à–µ–Ω—ã!`);
    updateUI();
}

function updateProduction(buildingId, isUpgrade) {
    const building = CONFIG.buildings[buildingId];
    const count = gameState.buildings[buildingId] || 0;
    
    if (building.production) {
        if (typeof building.production === 'object' && building.production.gold) {
            // –®–∞—Ö—Ç–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ nextYear
            return;
        }
        
        const production = isUpgrade && building.upgradedProduction ? 
            building.upgradedProduction : building.production;
        
        for (const [res, amount] of Object.entries(production)) {
            const currentProduction = gameState[`${res}Production`] || 0;
            const baseProduction = isUpgrade ? 
                (building.production[res] * count) : 
                (building.production[res] * (count - 1));
            const newProduction = amount * count;
            
            gameState[`${res}Production`] = currentProduction - baseProduction + newProduction;
        }
    }
    
    if (building.effect?.population) {
        const effect = isUpgrade && building.upgradedEffect ? 
            building.upgradedEffect.population : building.effect.population;
        gameState.population += effect * count;
    }
}

function nextYear() {
    gameState.year++;
    
    // –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–æ–≤
    gameState.resources.food += gameState.foodProduction || 0;
    gameState.resources.stone += gameState.stoneProduction || 0;
    gameState.resources.wood += gameState.woodProduction || 0;
    
    // –î–æ–±—ã—á–∞ –≤ —à–∞—Ö—Ç–∞—Ö
    if (gameState.buildings.mine) {
        const mineCount = gameState.buildings.mine;
        const isUpgraded = gameState.upgradedBuildings.mine;
        const production = isUpgraded ? 
            CONFIG.buildings.mine.upgradedProduction : 
            CONFIG.buildings.mine.production;
        
        for (let i = 0; i < mineCount; i++) {
            if (Math.random() < production.gold.chance) {
                gameState.resources.gold += production.gold.amount;
            }
            if (Math.random() < production.stone.chance) {
                gameState.resources.stone += production.stone.amount;
            }
        }
    }
    
    // –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∏—â–∏
    const foodNeeded = gameState.population * 2;
    gameState.resources.food -= foodNeeded;
    
    if (gameState.resources.food < 0) {
        const starvation = Math.min(Math.floor(-gameState.resources.food / 10), gameState.population);
        gameState.population -= starvation;
        gameState.morale -= 10;
        logEvent(`–ì–æ–ª–æ–¥! –ü–æ–≥–∏–±–ª–æ ${starvation} –∂–∏—Ç–µ–ª–µ–π. –ú–æ—Ä–∞–ª—å —Å–Ω–∏–∂–µ–Ω–∞.`);
        gameState.resources.food = 0;
    } else if (gameState.resources.food > foodNeeded * 2) {
        gameState.morale = Math.min(100, gameState.morale + 5);
    }
    
    tryTriggerEvent();
    
    if (gameState.year % 5 === 0) {
        saveGame();
    }
    
    updateUI();
}

function tryTriggerEvent() {
    if (gameState.year - gameState.lastEventYear < 5) return;
    
    const possibleEvents = CONFIG.events.filter(event => {
        if (event.chance && Math.random() > event.chance) return false;
        if (event.condition && !event.condition(gameState)) return false;
        return true;
    });
    
    if (possibleEvents.length > 0) {
        const event = possibleEvents[Math.floor(Math.random() * possibleEvents.length)];
        const message = event.effect(gameState);
        logEvent(`–°–æ–±—ã—Ç–∏–µ: ${event.name}! ${message}`);
        gameState.lastEventYear = gameState.year;
    }
}

function logEvent(message) {
    const now = new Date();
    const timeStr = now.toLocaleTimeString();
    const entry = document.createElement("div");
    entry.innerHTML = `<strong>–ì–æ–¥ ${gameState.year}</strong> (${timeStr}): ${message}`;
    elements.eventLog.appendChild(entry);
    elements.eventLog.scrollTop = elements.eventLog.scrollHeight;
    
    gameState.eventLog.push(`${gameState.year}: ${message}`);
    if (gameState.eventLog.length > 50) {
        gameState.eventLog.shift();
    }
}

function saveGame() {
    const saveData = {
        cityName: gameState.cityName,
        year: gameState.year,
        era: gameState.era,
        population: gameState.population,
        morale: gameState.morale,
        resources: { ...gameState.resources },
        buildings: { ...gameState.buildings },
        technologies: [...gameState.technologies],
        foodProduction: gameState.foodProduction,
        stoneProduction: gameState.stoneProduction,
        woodProduction: gameState.woodProduction,
        lastEventYear: gameState.lastEventYear,
        upgradedBuildings: { ...gameState.upgradedBuildings }
    };
    
    localStorage.setItem('cityBuilderSave', JSON.stringify(saveData));
    logEvent('–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
}

function loadGame() {
    const saved = localStorage.getItem('cityBuilderSave');
    if (saved) {
        try {
            const saveData = JSON.parse(saved);
            gameState = {
                ...initState(),
                ...saveData,
                resources: { ...initState().resources, ...saveData.resources }
            };
            logEvent('–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', e);
            newGame();
        }
    }
}

window.onload = initGame;